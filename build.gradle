def archiveName = "${modName}_${version}.zip"

task clean(type:Delete) {
    delete "$buildDirectory", "$distDirectory"
    doFirst {
        println "Deleting folders named ${buildDirectory} and ${distDirectory}"
    }
}

task createFolder(type: Copy) {
    from "src", "assets", "README.md"
    into "${buildDirectory}/${modName}"
    doFirst {
        println "Building files at ${buildDirectory}/${modName}"
    }
}

class InfoJsonCheck extends DefaultTask {
    @Input
    String fieldName
    @Input
    String value
    @InputFile
    File infoJson = project.file('src/info.json')

    @TaskAction
    def checkString() {
        infoJson.readLines().each{
            def matcher = it =~ /"${fieldName}": "(.+)"/
            matcher.matches()
            def matches = matcher.findAll()[0]
            if ( matches != null ) {
                def (_,foundValue) = matches
                if ( foundValue != value) {
                    throw new InvalidUserDataException("The ${fieldName} for this build ($value) does not match the ${fieldName} in info.json ($foundValue). This will cause Factorio to crash on startup. Build Aborted.")
                }
            }
        }
        println "$fieldName $value OK"
    }
}

task checkVersionNumber(type: InfoJsonCheck) {
    fieldName "version"
    value version
}

task checkModName(type: InfoJsonCheck) {
    fieldName "name"
    value modName
}

task createArchive(type: Zip) {
    archiveFileName = "$archiveName"
    destinationDirectory = file("$distDirectory")

    from "$buildDirectory"
    doFirst {
        println "Creating zip file named ${archiveName} from the contents of ${buildDirectory} in folder ${distDirectory}"
    }
}
createArchive.mustRunAfter createFolder

task build {
    dependsOn "checkVersionNumber"
    dependsOn "checkModName"
    dependsOn "createFolder"
    dependsOn "createArchive"
}

task backUpExistingMod(type: Copy) {
    from "${factorioModsDirectory}"
    include "${modName}*"
    exclude "*.bak"
    into "${factorioModsDirectory}"

    rename "(.+)", '$1.bak'
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, backing up in $rootDir instead"
        }
        println "Attempting to back up existing mod in ${factorioModsDirectory}"
    }
}

task moveNewMod(type: Copy) {
    from "${distDirectory}/${archiveName}"
    into "${factorioModsDirectory}"
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, mod zip file is in $rootDir instead" 
        }
        println "Moving file ${archiveName} from ${distDirectory} to ${factorioModsDirectory}"
    }
}
moveNewMod.mustRunAfter backUpExistingMod

task patch {
    dependsOn "backUpExistingMod"
    dependsOn "moveNewMod"
}
