def archiveName = "${modName}_${version}.zip"

task clean(type:Delete) {
    delete "$buildDirectory", "$distDirectory"
    doFirst {
        println "Deleting folders named ${buildDirectory} and ${distDirectory}"
    }
}

task createFolder(type: Copy) {
    from "src", "assets", "README.md"
    into "${buildDirectory}/${modName}"
    doFirst {
        println "Building files at ${buildDirectory}/${modName}"
    }
}

task checkVersionNumber {
    File infoFile = file('src/info.json')
    infoFile.readLines().each{
        def matcher = it =~ /"version": "([\d\.]+)"/
        matcher.matches()
        def matches = matcher.findAll()[0]
        if ( matches != null ) {
            def (_,infoVersion) = matches
            if ( infoVersion != version) {
                throw new InvalidUserDataException("The version for this build ($version) does not match the version in info.json ($infoVersion). This will cause Factorio to crash on startup. Build Aborted.")
            }
        }
    }
}

task createArchive(type: Zip) {
    archiveFileName = "$archiveName"
    destinationDirectory = file("$distDirectory")

    from "$buildDirectory"
    doFirst {
        println "Creating zip file named ${archiveName} from the contents of ${buildDirectory} in folder ${distDirectory}"
    }
}
createArchive.mustRunAfter createFolder

task build {
    dependsOn "checkVersionNumber"
    dependsOn "createFolder"
    dependsOn "createArchive"
}

task backUpExistingMod(type: Copy) {
    from "${factorioModsDirectory}"
    include "${modName}*"
    into "${factorioModsDirectory}"

    rename "(.+)", '$1.bak'
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, backing up in $rootDir instead"
        }
        println "Attempting to back up existing mod in ${factorioModsDirectory}"
    }
}

task moveNewMod(type: Copy) {
    from "${distDirectory}/${archiveName}"
    into "${factorioModsDirectory}"
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, mod zip file is in $rootDir instead" 
        }
        println "Moving file ${archiveName} from ${distDirectory} to ${factorioModsDirectory}"
    }
}
moveNewMod.mustRunAfter backUpExistingMod

task patch {
    dependsOn "backUpExistingMod"
    dependsOn "moveNewMod"
}
